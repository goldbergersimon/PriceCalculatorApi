// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PriceCalculatorApi.Data;

#nullable disable

namespace PriceCalculatorApi.Data.Migrations
{
    [DbContext(typeof(PriceCalculatorDbContext))]
    partial class PriceCalculatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IngredientProduct", b =>
                {
                    b.Property<int>("IngredientsIngredientID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductID")
                        .HasColumnType("int");

                    b.HasKey("IngredientsIngredientID", "ProductsProductID");

                    b.HasIndex("ProductsProductID");

                    b.ToTable("IngredientProduct");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Ingredient", b =>
                {
                    b.Property<int>("IngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientID"));

                    b.Property<int?>("Containers")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cups")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Oz")
                        .HasColumnType("int");

                    b.Property<int?>("Pieces")
                        .HasColumnType("int");

                    b.Property<decimal?>("Pounds")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerContainer")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerCup")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerOz")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerPiece")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerPound")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerTbs")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PricePerTsp")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("Tbs")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("Tsp")
                        .HasColumnType("int");

                    b.HasKey("IngredientID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("OfficeExpenses")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("OwnMargin")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("OwnPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("OwnProfit")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailMargin")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("RetailProfit")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("WholesaleMargin")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("WholesaleProfit")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("ItemId");

                    b.HasIndex("ProductID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ItemLabor", b =>
                {
                    b.Property<int>("ItemLaborId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemLaborId"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("LaborName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalLaborCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<TimeSpan>("TotalLaborPerItem")
                        .HasColumnType("time");

                    b.Property<int>("Workers")
                        .HasColumnType("int");

                    b.Property<int>("Yields")
                        .HasColumnType("int");

                    b.HasKey("ItemLaborId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemLabors");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ItemProduct", b =>
                {
                    b.Property<int>("ItemProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemProductId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Yields")
                        .HasColumnType("int");

                    b.HasKey("ItemProductId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ItemProducts");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<decimal?>("Container")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("IngredientCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Oz")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("Pieces")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ProductIngredient", b =>
                {
                    b.Property<int>("ProductIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductIngredientID"));

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("TotalCostPerItem")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ProductIngredientID");

                    b.HasIndex("IngredientID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ProductLabor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("LaborName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalLaborCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<TimeSpan>("TotalLaborPerItem")
                        .HasColumnType("time");

                    b.Property<int>("Workers")
                        .HasColumnType("int");

                    b.Property<int>("Yields")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLabors");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Settings", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("IngredientProduct", b =>
                {
                    b.HasOne("PriceCalculatorApi.Data.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsIngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceCalculatorApi.Data.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Item", b =>
                {
                    b.HasOne("PriceCalculatorApi.Data.Product", null)
                        .WithMany("Items")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ItemLabor", b =>
                {
                    b.HasOne("PriceCalculatorApi.Data.Item", "Item")
                        .WithMany("ItemLabors")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ItemProduct", b =>
                {
                    b.HasOne("PriceCalculatorApi.Data.Item", "Item")
                        .WithMany("ItemProducts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceCalculatorApi.Data.Product", "Product")
                        .WithMany("ItemProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ProductIngredient", b =>
                {
                    b.HasOne("PriceCalculatorApi.Data.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceCalculatorApi.Data.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.ProductLabor", b =>
                {
                    b.HasOne("PriceCalculatorApi.Data.Product", "Product")
                        .WithMany("ProductLabors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Item", b =>
                {
                    b.Navigation("ItemLabors");

                    b.Navigation("ItemProducts");
                });

            modelBuilder.Entity("PriceCalculatorApi.Data.Product", b =>
                {
                    b.Navigation("ItemProducts");

                    b.Navigation("Items");

                    b.Navigation("ProductIngredients");

                    b.Navigation("ProductLabors");
                });
#pragma warning restore 612, 618
        }
    }
}
